'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
    var utils = this.uship.utils;

    var DataCache = function () {
        function DataCache(items, throwOnAccessorPathMiss) {
            _classCallCheck(this, DataCache);

            this.items = items && utils.isObject(items) ? items : {};

            if (utils.isObject(throwOnAccessorPathMiss)) {
                this.throwOnAccessorPathMiss = {
                    get: !!throwOnAccessorPathMiss.get,
                    set: !!throwOnAccessorPathMiss.set
                };
            } else if (utils.isBoolean(throwOnAccessorPathMiss)) {
                this.throwOnAccessorPathMiss = {
                    get: throwOnAccessorPathMiss,
                    set: throwOnAccessorPathMiss
                };
            } else {
                this.throwOnAccessorPathMiss = {
                    get: false,
                    set: false
                };
            }
        }

        _createClass(DataCache, [{
            key: 'get',
            value: function get(accessor) {
                var accessors = accessor.split('.');
                var cursor = this.items,
                    key = void 0;

                while (accessors.length > 1) {
                    key = accessors.shift();

                    if (!cursor.hasOwnProperty(key)) {
                        if (this.throwOnAccessorPathMiss.get) {
                            throw new Error(utils.format('The cache path "{0}", did not contain an entry for the key "{1}"', accessor, key));
                        }
                        return undefined;
                    }
                    cursor = cursor[key];
                }

                return cursor[accessors[0]];
            }
        }, {
            key: 'set',
            value: function set(accessor, value) {
                var accessors = accessor.split('.');
                var cursor = this.items,
                    key = void 0;

                while (accessors.length > 1) {
                    key = accessors.shift();

                    if (!cursor.hasOwnProperty(key)) {
                        if (this.throwOnAccessorPathMiss.set) {
                            throw new Error(utils.format('The cache path "{0}", did not contain an entry for the key "{1}"', accessor, key));
                        }

                        cursor[key] = {};
                    }
                    cursor = cursor[key];
                }

                cursor[accessors[0]] = value;
            }
        }]);

        return DataCache;
    }();

    DataCache.create = utils.cachingFactory.bind(null, DataCache);

    this.uship.DataCache = DataCache;
}).call(this);